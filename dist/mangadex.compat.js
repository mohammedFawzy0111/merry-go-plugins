"use strict";const API="https://api.mangadex.org";const CDN="https://uploads.mangadex.org";const MANGA_DEX_HEADERS={"Content-Type":"application/json",Accept:"application/json"};const limit=20;const mangaDex=sandbox.utils.createSource({name:"MangaDex",baseUrl:API,icon:"https://mangadex.org/favicon.ico"});const getChapters=async mangaId=>{let chapters=[];let offset=0;const limit=100;let total=0;do{const chaptersResp=await sandbox.http.get(`${API}/chapter`,{headers:MANGA_DEX_HEADERS,params:{manga:mangaId,translatedLanguage:["en","ar"],order:{chapter:"asc"},limit:limit,offset:offset}});const chapterData=chaptersResp.data.data;total=chaptersResp.data.total;chapters=chapters.concat(chapterData.map(ch=>{const chapterNum=Number(ch.attributes.chapter)||0;const chapterUrl=`${API}/chapter/${ch.id}`;return sandbox.utils.createChapter({number:chapterNum,url:chapterUrl,title:ch.attributes.title||`Chapter ${chapterNum}`,manga:`${API}/manga/${mangaId}`,publishedAt:ch.attributes.publishAt||(new Date).toISOString(),pages:[]})}));offset+=limit}while(offset<total);return chapters};const getRating=async mangaId=>{var _Number;const response=await sandbox.http.get(`${API}/statistics/manga/${mangaId}`,{headers:MANGA_DEX_HEADERS});const id=Object.keys(response.data.statistics)[0];return(_Number=Number(response.data.statistics[id].rating.average))!==null&&_Number!==void 0?_Number:0};const getBestTitle=attributes=>{if(attributes.title&&attributes.title["en"])return attributes.title["en"];if(attributes.title&&attributes.title["ar"])return attributes.title["ar"];if(attributes.title&&attributes.title["ja"])return attributes.title["ja"];if(attributes.altTitles){const englishAltTitle=attributes.altTitles.find(titleObj=>titleObj["en"]);if(englishAltTitle!==null&&englishAltTitle!==void 0&&englishAltTitle["en"])return englishAltTitle["en"];const firstAltTitle=attributes.altTitles.find(titleObj=>{const values=Object.values(titleObj);return values.length>0&&values[0]});if(firstAltTitle)return Object.values(firstAltTitle)[0]}return"Unknown"};mangaDex.fetchRecentManga=async offset=>{try{const response=await sandbox.http.get(`${API}/manga`,{headers:MANGA_DEX_HEADERS,params:{limit:limit,offset:offset,"order[updatedAt]":"desc",includes:["cover_art"]}});const mangas=await Promise.all(response.data.data.map(async item=>{var _coverRel$attributes;const attributes=item.attributes;const title=getBestTitle(attributes);const url=`${API}/manga/${item.id}`;const id=item.id||`${title} + ${url}`;const coverRel=item.relationships.find(rel=>rel.type==="cover_art");let imageUrl="";if(coverRel!==null&&coverRel!==void 0&&(_coverRel$attributes=coverRel.attributes)!==null&&_coverRel$attributes!==void 0&&_coverRel$attributes.fileName){imageUrl=`${CDN}/covers/${item.id}/${coverRel.attributes.fileName}.256.jpg`}const lastChapter=attributes.lastChapter||"no chapters";const lastUpdated=attributes.updatedAt||(new Date).toISOString();return sandbox.utils.createManga({id:id,name:title,url:url,imageUrl:imageUrl,lastChapter:lastChapter,lastUpdated:lastUpdated,source:mangaDex})}));return mangas}catch(error){sandbox.console.error("Error fetching recent manga:",error);return[]}};mangaDex.fetchPopularManga=async offset=>{try{const response=await sandbox.http.get(`${API}/manga`,{headers:MANGA_DEX_HEADERS,params:{limit:limit,offset:offset,"order[followedCount]":"desc",includes:["cover_art"]}});const mangas=await Promise.all(response.data.data.map(async item=>{var _coverRel$attributes2;const attributes=item.attributes;const title=getBestTitle(attributes);const url=`${API}/manga/${item.id}`;const id=item.id||`${title} + ${url}`;const coverRel=item.relationships.find(rel=>rel.type==="cover_art");let imageUrl="";if(coverRel!==null&&coverRel!==void 0&&(_coverRel$attributes2=coverRel.attributes)!==null&&_coverRel$attributes2!==void 0&&_coverRel$attributes2.fileName){imageUrl=`${CDN}/covers/${item.id}/${coverRel.attributes.fileName}.256.jpg`}const lastChapter=attributes.lastChapter||"no chapters";const lastUpdated=attributes.updatedAt||(new Date).toISOString();return sandbox.utils.createManga({id:id,name:title,url:url,imageUrl:imageUrl,lastChapter:lastChapter,lastUpdated:lastUpdated,source:mangaDex})}));return mangas}catch(error){sandbox.console.error("Error fetching popular manga:",error);return[]}};mangaDex.fetchMangaDetails=async mangaUrl=>{try{var _mangaData$attributes,_mangaData$attributes2,_mangaData$relationsh,_mangaData$relationsh2;const response=await sandbox.http.get(mangaUrl,{headers:MANGA_DEX_HEADERS,params:{includes:["cover_art","author","artist"]}});const mangaData=response.data.data;const title=getBestTitle(mangaData.attributes);let coverUrl="";const coverRel=mangaData.relationships.find(rel=>rel.type==="cover_art");if(coverRel!==null&&coverRel!==void 0&&coverRel.id){const coverResponse=await sandbox.http.get(`${API}/cover/${coverRel.id}`);const fileName=coverResponse.data.data.attributes.fileName;coverUrl=`${CDN}/covers/${mangaData.id}/${fileName}.256.jpg`}const lastChapter=mangaData.attributes.lastChapter||"no chapters";const lastUpdated=mangaData.attributes.updatedAt||(new Date).toISOString();const details={altTitles:mangaData.attributes.altTitles?mangaData.attributes.altTitles.map(titleObj=>{const firstValue=Object.values(titleObj)[0];return firstValue||""}).filter(Boolean):[],status:mangaData.attributes.status||"Unknown",description:((_mangaData$attributes=mangaData.attributes.description)===null||_mangaData$attributes===void 0?void 0:_mangaData$attributes.en)||"","original language":mangaData.attributes.originalLanguage||"en",Demographic:mangaData.attributes.publicationDemographic||"Unknown",year:mangaData.attributes.year||"Unknown",tags:((_mangaData$attributes2=mangaData.attributes.tags)===null||_mangaData$attributes2===void 0?void 0:_mangaData$attributes2.map(tag=>tag.attributes.name.en))||[],author:((_mangaData$relationsh=mangaData.relationships.find(rel=>rel.type==="author"))===null||_mangaData$relationsh===void 0||(_mangaData$relationsh=_mangaData$relationsh.attributes)===null||_mangaData$relationsh===void 0?void 0:_mangaData$relationsh.name)||"Unknown Author",artist:((_mangaData$relationsh2=mangaData.relationships.find(rel=>rel.type==="artist"))===null||_mangaData$relationsh2===void 0||(_mangaData$relationsh2=_mangaData$relationsh2.attributes)===null||_mangaData$relationsh2===void 0?void 0:_mangaData$relationsh2.name)||"Unknown Artist",rating:await getRating(mangaData.id)};const chapters=await getChapters(mangaData.id);return sandbox.utils.createManga({id:mangaData.id||`${title} + ${mangaUrl}`,name:title,url:mangaUrl,imageUrl:coverUrl,lastChapter:lastChapter,lastUpdated:lastUpdated,source:mangaDex,data:details,chapters:chapters})}catch(error){sandbox.console.error("Error fetching manga details:",error);return sandbox.utils.createManga({id:"",name:"Unknown",url:mangaUrl,imageUrl:"",lastChapter:"N/A",lastUpdated:(new Date).toISOString(),source:mangaDex,data:{},chapters:[]})}};mangaDex.fetchChapterDetails=async url=>{try{var _chapterData$relation;const chapterReq=await sandbox.http.get(url,{headers:MANGA_DEX_HEADERS});const chapterData=chapterReq.data.data;const mangaId=((_chapterData$relation=chapterData.relationships.find(rel=>rel.type==="manga"))===null||_chapterData$relation===void 0?void 0:_chapterData$relation.id)||"";const title=chapterData.attributes.title||"";const chapterNum=Number(chapterData.attributes.chapter)||0;const chapterId=chapterData.id;const publishedAt=chapterData.attributes.publishAt||(new Date).toISOString();const atHomeResp=await sandbox.http.get(`${API}/at-home/server/${chapterId}`,{headers:MANGA_DEX_HEADERS});const baseUrl=atHomeResp.data.baseUrl;const hash=atHomeResp.data.chapter.hash;const fileNames=atHomeResp.data.chapter.data||[];const pages=fileNames.map(name=>`${baseUrl}/data/${hash}/${name}`);return sandbox.utils.createChapter({manga:`${API}/manga/${mangaId}`,title:title,number:chapterNum,url:url,publishedAt:publishedAt,pages:pages})}catch(error){sandbox.console.error("Error fetching chapter:",error);return sandbox.utils.createChapter({manga:"",number:0,url:url,pages:[]})}};const tagCache=new Map;mangaDex.fetchSearchResults=async(query,offset)=>{try{const isTagSearch=query.startsWith("[")&&query.endsWith("]");const params={limit:limit,offset:offset,includes:["cover_art"],availableTranslatedLanguage:["en","ar"],"order[followedCount]":"desc"};if(isTagSearch){const tagName=query.slice(1,-1).trim().toLowerCase();if(tagCache.has(tagName)){params.includedTags=[tagCache.get(tagName)]}else{const tagResponse=await sandbox.http.get(`${API}/manga/tag`);const allTags=tagResponse.data.data;allTags.forEach(tag=>{const name=tag.attributes.name.en.toLowerCase();tagCache.set(name,tag.id)});if(tagCache.has(tagName)){params.includedTags=[tagCache.get(tagName)]}else{return[]}}}else{params.title=query}const response=await sandbox.http.get(`${API}/manga`,{headers:MANGA_DEX_HEADERS,params:params});const searchResults=response.data.data;const mangas=[];for(const result of searchResults){var _coverRel$attributes3;const mangaId=result.id;const name=getBestTitle(result.attributes);const url=`${API}/manga/${mangaId}`;const coverRel=result.relationships.find(rel=>rel.type==="cover_art");const coverFileName=coverRel===null||coverRel===void 0||(_coverRel$attributes3=coverRel.attributes)===null||_coverRel$attributes3===void 0?void 0:_coverRel$attributes3.fileName;const coverUrl=coverFileName?`${CDN}/covers/${mangaId}/${coverFileName}.256.jpg`:"";const lastChapter=result.attributes.lastChapter||"no chapters";const lastUpdated=result.attributes.updatedAt||(new Date).toISOString();mangas.push(sandbox.utils.createManga({id:mangaId,name:name,url:url,imageUrl:coverUrl,source:mangaDex,lastChapter:lastChapter,lastUpdated:lastUpdated}))}return mangas}catch(error){sandbox.console.error("Error fetching search results:",error);return[]}};module.exports=mangaDex;